name: Biological Memory Pipeline - Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_biological_memory
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        # Install dbt dependencies
        pip install dbt-duckdb dbt-postgres
    
    - name: Set up test environment
      env:
        POSTGRES_DB_URL: postgresql://postgres:postgres@localhost:5432/postgres
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_biological_memory
        OLLAMA_URL: http://localhost:11434
        OLLAMA_MODEL: gpt-oss:20b
        EMBEDDING_MODEL: nomic-embed-text
        DUCKDB_PATH: /tmp/test_memory.duckdb
        MAX_DB_CONNECTIONS: 160
        OLLAMA_TIMEOUT: 300
        DBT_PROFILES_DIR: /tmp/.dbt
        DBT_PROJECT_DIR: ${{ github.workspace }}
      run: |
        # Create test database
        createdb -h localhost -U postgres test_biological_memory || true
        
        # Create dbt profiles directory
        mkdir -p /tmp/.dbt
        
        # Copy example profile
        cp profiles.yml.example /tmp/.dbt/profiles.yml
        
        echo "Test environment configured"
    
    - name: Run unit tests
      env:
        POSTGRES_DB_URL: postgresql://postgres:postgres@localhost:5432/postgres
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_biological_memory
        OLLAMA_URL: http://localhost:11434
        OLLAMA_MODEL: gpt-oss:20b
        EMBEDDING_MODEL: nomic-embed-text
        DUCKDB_PATH: /tmp/test_memory.duckdb
        MAX_DB_CONNECTIONS: 160
        OLLAMA_TIMEOUT: 300
        DBT_PROFILES_DIR: /tmp/.dbt
        DBT_PROJECT_DIR: ${{ github.workspace }}
      run: |
        pytest tests/ \
          --maxfail=5 \
          --tb=short \
          -v \
          --cov=src \
          --cov=models \
          --cov=macros \
          --cov-report=term-missing \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --cov-fail-under=90 \
          --timeout=300 \
          -m "not slow"
    
    - name: Run integration tests
      env:
        POSTGRES_DB_URL: postgresql://postgres:postgres@localhost:5432/postgres
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_biological_memory
        OLLAMA_URL: http://localhost:11434
        OLLAMA_MODEL: gpt-oss:20b
        EMBEDDING_MODEL: nomic-embed-text
        DUCKDB_PATH: /tmp/test_memory.duckdb
        MAX_DB_CONNECTIONS: 160
        OLLAMA_TIMEOUT: 300
        DBT_PROFILES_DIR: /tmp/.dbt
        DBT_PROJECT_DIR: ${{ github.workspace }}
      run: |
        pytest tests/ \
          -m "integration" \
          --tb=short \
          -v \
          --timeout=300
    
    - name: Run performance benchmarks
      env:
        POSTGRES_DB_URL: postgresql://postgres:postgres@localhost:5432/postgres
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_biological_memory
        OLLAMA_URL: http://localhost:11434
        OLLAMA_MODEL: gpt-oss:20b
        EMBEDDING_MODEL: nomic-embed-text
        DUCKDB_PATH: /tmp/test_memory.duckdb
        MAX_DB_CONNECTIONS: 160
        OLLAMA_TIMEOUT: 300
        DBT_PROFILES_DIR: /tmp/.dbt
        DBT_PROJECT_DIR: ${{ github.workspace }}
      run: |
        pytest tests/ \
          -m "performance" \
          --tb=short \
          -v \
          --benchmark-only \
          --benchmark-sort=mean \
          --timeout=300
    
    - name: Check test suite runtime
      run: |
        # Verify test suite completes in under 5 minutes
        start_time=$(date +%s)
        pytest tests/test_suite_validation.py::TestPerformanceRequirements::test_test_suite_runtime -v
        end_time=$(date +%s)
        runtime=$((end_time - start_time))
        
        if [ $runtime -gt 300 ]; then
          echo "❌ Test suite took ${runtime}s, should be <300s"
          exit 1
        else
          echo "✅ Test suite completed in ${runtime}s (<300s requirement)"
        fi
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml

  dbt-tests:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_biological_memory
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dbt dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dbt-duckdb dbt-postgres
    
    - name: Set up dbt environment
      env:
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_biological_memory
        OLLAMA_URL: http://localhost:11434
        OLLAMA_MODEL: gpt-oss:20b
        DUCKDB_PATH: /tmp/test_memory.duckdb
        DBT_PROFILES_DIR: /tmp/.dbt
      run: |
        # Create test database
        createdb -h localhost -U postgres test_biological_memory || true
        
        # Create dbt profiles directory and copy config
        mkdir -p /tmp/.dbt
        cp profiles.yml.example /tmp/.dbt/profiles.yml
    
    - name: Test dbt configuration
      env:
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_biological_memory
        OLLAMA_URL: http://localhost:11434
        OLLAMA_MODEL: gpt-oss:20b
        DUCKDB_PATH: /tmp/test_memory.duckdb
        DBT_PROFILES_DIR: /tmp/.dbt
      run: |
        # Test dbt debug
        dbt debug --target test
        
        # Test dbt compile (when models exist)
        dbt compile --target test || echo "Models not yet implemented, skipping compile"
    
    - name: Run dbt tests (when models exist)  
      env:
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_biological_memory
        OLLAMA_URL: http://localhost:11434
        OLLAMA_MODEL: gpt-oss:20b  
        DUCKDB_PATH: /tmp/test_memory.duckdb
        DBT_PROFILES_DIR: /tmp/.dbt
      run: |
        # Run dbt tests when models are implemented
        dbt test --target test || echo "dbt models not yet implemented, skipping tests"

  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
    
    - name: Run code formatting checks
      run: |
        black --check --diff tests/ || true
        isort --check-only --diff tests/ || true
    
    - name: Run linting
      run: |
        flake8 tests/ --max-line-length=100 --extend-ignore=E203,W503 || true
    
    - name: Run type checking
      run: |
        mypy tests/ --ignore-missing-imports || true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
        # Check for known security vulnerabilities
        safety check --json || true
        
        # Run static security analysis
        bandit -r tests/ -f json || true